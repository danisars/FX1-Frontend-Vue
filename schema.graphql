### This file was generated by Nexus Schema
### Do not make changes to this file directly

type Channel {
  Livestream: Livestream
  channelGroupID: String!
  createdAt: Float
  description: String
  id: ID
  isDeleted: Boolean
  livestreamID: String
  lockerRoomID: String!
  name: String!
  slug: String!
  type: String!
  unreadMessagesCount: Float
  updatedAt: Float
}

type ChannelAndChannelGroup {
  ChannelGroups: [ChannelGroup]
  Channels: [Channel]
}

type ChannelGroup {
  Channels: [Channel]
  createdAt: Float
  description: String
  group: String!
  id: ID
  isDeleted: Boolean
  lockerRoomID: String!
  name: String!
  slug: String!
  updatedAt: Float
  withLivestream: Boolean
}

type ChannelGroups {
  count: Int
  items: [ChannelGroup!]
  next: Int
  total: Int
}

type Channels {
  count: Int
  items: [Channel!]
  next: Int
  total: Int
}

type Club {
  Avatar: Media
  CoverPhoto: Media
  createdAt: Float
  defaultChannelSlug: String
  id: ID
  isFeatured: Boolean
  leagueID: String
  leagueName: String
  name: String!
  slug: String!
  sportIDs: [String!]!
  supporterCount: Int
  updatedAt: Float
}

type Clubs {
  count: Int
  items: [Club!]
  next: Int
  total: Int
}

type FanGroup {
  Avatar: Media
  CoverPhoto: Media
  createdAt: Float
  id: ID
  isDeleted: Boolean
  name: String!
  slug: String!
  sportIDs: [String!]!
  updatedAt: Float
}

type FanGroups {
  count: Int
  items: [FanGroup!]
  next: Int
  total: Int
}

input InputCreateChannel {
  channelGroupID: String!
  description: String
  name: String!
  type: String!
}

input InputCreateChannelGroup {
  description: String
  lockerRoomID: String!
  name: String!
}

input InputCreateClub {
  Avatar: InputMedia
  CoverPhoto: InputMedia
  leagueID: String!
  name: String!
  sportIDs: [String!]!
}

input InputEditChannel {
  description: String
  name: String!
  type: String!
}

input InputEditChannelGroup {
  description: String
  name: String!
}

input InputEditClub {
  Avatar: InputMedia
  CoverPhoto: InputMedia
  name: String!
}

input InputEditUser {
  Avatar: InputMedia
}

input InputInviteUserForManagerialRole {
  emailAddress: String
  role: String
}

input InputMedia {
  objectID: String!
  objectType: String!
}

input InputQueryMedia {
  isSport: Boolean!
  objectID: String!
  objectType: String!
  type: String
}

input InputUpdateLockerRoomUserRoles {
  role: String
  type: String!
  userID: String!
}

input InputUser {
  Avatar: InputMedia
  firstName: String
  lastName: String
  username: String
}

scalar JSON

type League {
  Avatar: Media
  CoverPhoto: Media
  boost: Float
  createdAt: Float
  id: ID
  name: String!
  slug: String!
  sportIDs: [String!]!
  updatedAt: Float
}

type Leagues {
  count: Int
  items: [League!]
  next: Int
  total: Int
}

type Livestream {
  LivestreamSource: LivestreamSource
  createdAt: Float
  id: ID
  isLive: Boolean
  link: String!
  source: String!
  startDate: String
  timezone: String
  title: String!
  updatedAt: Float
}

type LivestreamSource {
  id: ID
  name: String!
}

type LockerRoom {
  ChannelGroups: [ChannelGroup]
  Club: Club
  FanGroup: FanGroup
  League: League

  """
  Return role if either owner or manager else null
  """
  MyRole: UserRole
  Roles: UserRolesInLockerRoom
  Sports: [Sport]
  channelCount: Int
  createdAt: Float
  defaultChannelSlug: String
  group: String!
  id: ID
  isSupported: Boolean
  name: String!
  slug: String!
  sportsIDs: [String!]!
  supporterCount: Int
  totalUnreadMessagesCount: Int
  updatedAt: Float
}

type LockerRooms {
  count: Int
  items: [LockerRoom!]
  next: Int
  total: Int
}

type LockerRoomsByLeague {
  LockerRooms(count: Int, cursor: Int): LockerRooms!
  leagueID: String!
  leagueName: String!
}

type Me {
  Avatar: Media
  Supporting: [LockerRoom!]
  createdAt: Float
  emailAddress: String!
  firstName: String
  id: ID
  lastName: String
  name: String!
  slug: String!
  uid: String!
  unseenNotifications: Int!
  updatedAt: Float
  username: String!
}

type Media {
  PhotoURL(type: String): String
  isSport: Boolean
  objectID: String!
  objectType: String!
}

type MediaMessage {
  PhotoURL(type: String): String
  isSport: Boolean
  objectID: String!
  objectType: String!
}

type Message {
  Media: [MediaMessage!]
  PhotoURLs: [PhotoURL!]
  RepliedTo: Message
  User: User
  channelSlug: String!
  chatID: String!
  createdAt: Float
  id: ID
  isDeletedEveryone: Boolean
  isDeletedSelf: Boolean
  isEdited: Boolean
  isUserBlocked: Boolean
  repliedToChatID: String
  text: String
  updatedAt: Float
  userID: String!
}

type Messages {
  count: Int
  items: [Message!]
  next: Int
  total: Int
}

type MessagesNextAsString {
  count: Int
  items: [Message!]
  next: String
  total: Int
}

type Mutation {
  blockUser(targetUserID: String!): MutationResult!
  createChannel(input: InputCreateChannel!): MutationResult!
  createChannelGroup(input: InputCreateChannelGroup!): MutationResult!
  createClub(input: InputCreateClub!): MutationResult!
  createFormEntry(data: JSON, type: String!): MutationResult!
  createUser(input: InputUser!): MutationResult!
  deleteChannel(id: String!): MutationResult!
  deleteChannelGroup(id: String!): MutationResult!
  deleteFirebaseAccount: MutationResult!
  deleteImages(objectIDs: [String!]!): MutationResult!
  deleteMessage(chatID: String!, deleteForEveryone: Boolean!, deleteForSelf: Boolean!): MutationResult!
  deleteUser: MutationResult!
  editChannel(id: String!, input: InputEditChannel!): MutationResult!
  editChannelGroup(id: String!, input: InputEditChannelGroup!): MutationResult!
  editClub(id: String!, input: InputEditClub!): MutationResult!
  editLockerRoomUserRole(lockerRoomID: String!, role: String!, userID: String!): MutationResult!
  editMessage(
    Media: [InputMedia!]
    MentionedUserIDs: [String!]
    chatID: String!
    repliedToChatID: String
    text: String
  ): MutationResult!
  editUser(input: InputEditUser!): MutationResult!
  inviteUserForManagerialRole(input: [InputInviteUserForManagerialRole!]!, lockerRoomID: String!): MutationResult!
  readMessage(channelSlug: String!): MutationResult!
  readNotification(notificationIDs: [String!]!): MutationResult!
  registerInterest(data: JSON, type: String!): MutationResult!
  @deprecated(reason: "Use createFormEntry with type 'RegisterInterest' instead")
  removeUserManagerialRole(lockerRoomID: String!, role: String!, userID: String!): MutationResult!
  respondUserManagerialRoleInvite(id: String!): MutationResult!
  seenNotification(lastNotificationID: String!): MutationResult!
  sendMessage(
    Media: [InputMedia!]
    MentionedUserIDs: [String!]
    channelSlug: String!
    chatID: String!
    repliedToChatID: String
    text: String
  ): MutationResult!

  """
  If UserRole exists as owner/manager, no changes will be made.
  """
  support(lockerRoomID: String!): MutationResult!
  trackLogin(
    browser: String
    browserVersion: String
    ip: String
    loginMethod: String!
    model: String
    os: String
    pageName: String!
    platform: String!
    webDisplaySize: String
  ): MutationResult!
  trackRegisterAccount(
    avatar: String!
    avatarObjectID: String
    browser: String
    browserVersion: String
    emailAddress: String!
    ip: String
    model: String
    os: String
    pageName: String!
    platform: String!
    registrationMethod: String!
    username: String!
    webDisplaySize: String
  ): MutationResult!
  trackSendMessage(
    browser: String
    browserVersion: String
    channel: String!
    ip: String
    league: String
    lockerRoomType: String!
    model: String
    name: String!
    os: String
    pageName: String!
    platform: String!
    sport: String!
    type: String!
    webDisplaySize: String
  ): MutationResult!
  trackSupportLockerRoom(
    browser: String
    browserVersion: String
    ip: String
    league: String
    lockerRoomType: String!
    model: String
    name: String!
    os: String
    pageName: String!
    platform: String!
    sport: String!
    webDisplaySize: String
  ): MutationResult!
  trackUnsupportLockerRoom(
    browser: String
    browserVersion: String
    ip: String
    league: String
    lockerRoomType: String!
    model: String
    name: String!
    os: String
    pageName: String!
    platform: String!
    sport: String!
    webDisplaySize: String
  ): MutationResult!
  trackViewPage(
    browser: String
    browserVersion: String
    channel: String
    ip: String
    league: String
    lockerRoomType: String
    model: String
    name: String
    os: String
    pageName: String!
    platform: String!
    sport: String
    webDisplaySize: String
  ): MutationResult!
  unblockUser(targetUserID: String!): MutationResult!
  undeleteChannel(id: String!): MutationResult!
  undeleteChannelGroup(id: String!): MutationResult!

  """
  If UserRole exists as owner/manager, no changes will be made.
  """
  unsupport(lockerRoomID: String!): MutationResult!
  updateLockerRoomUserRoles(input: [InputUpdateLockerRoomUserRoles!]!, lockerRoomID: String!): MutationResult!
}

type MutationResult {
  objectID: String
  objectType: String
  success: Boolean!
  timestamp: Float
}

"""
This is viewable on the specified owner of the targetUserID.
"""
type Notification {
  Actor: User!
  LockerRoom: LockerRoom!
  Message: Message!

  """
  This is the uid of the one who replied or mentioned a user.
  """
  actorUid: String!

  """
  This is the userID of the one who replied or mentioned a user.
  """
  actorUserID: String!
  channelName: String!
  channelSlug: String!

  """
  This is the chatID of the reply or where a user got mentioned.
  """
  chatID: String!
  createdAt: Float
  id: ID
  isRead: Boolean
  isSeen: Boolean

  """
  This is the messageID of the reply or where a user got mentioned.
  """
  messageID: String!

  """
  This is the uid of the one who got replied to or mentioned.
  """
  targetUid: String!

  """
  This is the userID of the one who got replied to or mentioned.
  """
  targetUserID: String!
  type: String!
}

type NotificationWithMessages {
  Messages: [Message!]!
  Notification: Notification!
}

type Notifications {
  count: Int
  items: [Notification!]
  next: Int
  total: Int
}

type PhotoURL {
  photoURL: String
  type: String!
}

type Query {
  Me: Me
  Supporting: [LockerRoom]
  channelExists(channelGroupID: String!, name: String!): Boolean
  channelGroupExists(lockerRoomID: String!, name: String!): Boolean
  getAllUsersViaUsername(text: String): Users!
  getChannel(id: String, slug: String): Channel
  getChannelGroup(id: String, slug: String): ChannelGroup
  getChannelGroups: ChannelGroups!
  getChannels(channelGroupID: String): Channels!
  getClub(id: String, slug: String): Club
  getClubs: Clubs!
  getDeletedChannelAndChannelGroups: ChannelAndChannelGroup
  getFanGroup(id: String, slug: String): FanGroup
  getFanGroups: FanGroups!
  getFeatured: [LockerRoom!]!
  getLeague(id: String, slug: String): League
  getLeagues: Leagues!
  getLockerRoom(id: String, slug: String): LockerRoom
  getLockerRooms: LockerRooms!
  getMessage(id: String!): Message
  getMessagesByChannelSlug(channelSlug: String!, count: Int, cursor: Int): Messages!
  getMessagesByChannelSlugUsingCreatedAtAsCursor(
    channelSlug: String!
    count: Int
    cursor: String
    direction: String!
  ): MessagesNextAsString!

  """
  API that will return the focused chat sandwiched between 1 message above if available and at least 1 message below
  """
  getMessagesByChannelSlugUsingCreatedAtAsCursorFromNotification(
    channelSlug: String!
    count: Int
    cursor: String
  ): MessagesNextAsString!

  """
  API that is a combination of getMessagesByChannelSlugUsingCreatedAtAsCursor (commented) and getMessagesByChannelSlugUsingCreatedAtAsCursorFromNotification
  """
  getMessagesByChannelSlugUsingCreatedAtAsCursorV2(
    channelSlug: String!
    count: Int
    cursor: String
    direction: String!
    withAdditional: Boolean!
  ): MessagesNextAsString!
  getNotification(id: String!): Notification
  getNotificationWithMessages(id: String!): NotificationWithMessages
  getNotifications(count: Int, cursor: Int, isRead: Boolean): Notifications
  getPhotoURL(isSport: Boolean, objectID: String!, objectType: String!, type: String): String
  getPhotoURLs(input: [InputQueryMedia!]!): [String]
  getSport(id: String, slug: String): Sport
  getSports: Sports!
  getUnreadMessages(lockerRoomID: String!): [ReadMessage]
  getUser(id: String, slug: String): User
  getUserInvite(id: String!): UserInvite
  getUserRolesInLockerRoom(lockerRoomID: String!): UserRolesInLockerRoom
  getUsers: Users!
  getUsersByLockerRoom(lockerRoomID: String!, text: String): Users!
  invitedUserExists(id: String!): Boolean
  userNameExists(username: String!): Boolean
}

type ReadMessage {
  channelSlug: String!
  unreadMessagesCount: Float
}

type Sport {
  Avatar: Media!
  CoverPhoto: Media!
  FanGroupLockerRooms(count: Int, cursor: Int): LockerRooms!
  LockerRooms(count: Int, cursor: Int): LockerRooms!
  LockerRoomsByLeague: [LockerRoomsByLeague!]!
  createdAt: Float
  id: ID
  name: String!
  slug: String!
  status: String
  updatedAt: Float
}

type Sports {
  count: Int
  items: [Sport!]
  next: Int
  total: Int
}

type User {
  Avatar: Media
  createdAt: Float
  emailAddress: String!
  firstName: String
  id: ID
  isBlocked: Boolean
  lastName: String
  name: String!
  slug: String!
  uid: String!
  updatedAt: Float
  username: String!
}

type UserInvite {
  data: UserInviteData
  expiration: Float
  group: String!
  id: ID
  time: Float
  type: String!
  url: String
  userID: String!
}

type UserInviteData {
  emailAddress: String
  group: String
  lockerRoomID: String
  lockerRoomSlug: String
  role: String
}

type UserRole {
  User: User!
  UserRoleType: [UserRoleType!]
  createdAt: Float
  group: String!
  groupID: String!
  groupType: String!
  id: ID
  isPrimaryOwner: Boolean
  lockerRoomID: String!
  role: String!
  status: String!
  uid: String!
  updatedAt: Float
  userID: String!
}

type UserRoleType {
  id: ID
  name: String!
}

type UserRoles {
  count: Int
  items: [UserRole!]
  next: Int
  total: Int
}

type UserRolesInLockerRoom {
  Managers: [UserRole!]!
  Owners: [UserRole!]!
  Supporters: [UserRole!]!
}

type Users {
  count: Int
  items: [User!]
  next: Int
  total: Int
}
